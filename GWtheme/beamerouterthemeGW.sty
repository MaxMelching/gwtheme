%% start of file `beamerouterthemeGW.sty'.
% Author: Max Melching (m-melching@web.de), 2025
%
% Acknowledgements: this theme is a based on the UC Berkeley beamer theme.
% The file structure, however, follows the DTU template from
% https://gitlab.gbar.dtu.dk/latex/dtutemplates/-/tree/master/templates/Beamer


\mode<presentation>
% -- Purpose of this file: specify stuff that does not belong to content of the
% -- slide, such as headline, footline, background, frametitle.


% -- Frametitle and headline --------------------------------------------------
\newlength{\themeGW@headerskip}  % Padding from top of frame
% \setlength{\themeGW@headerskip}{0.0667\paperheight}  % Good if only title
\setlength{\themeGW@headerskip}{0.0333\paperheight}  % Good if subtitle in line below


\RequirePackage{tikz}
\def\themeGW@SecSubsecSeparator{%
    \raisebox{-0.1em}{\tikz{
    \draw[
        fill,
    ] (-0.04em, -0.1em) rectangle (0.04em, 1.05em);
}}}
% \def\themeGW@SecSubsecSeparator{\textbullet}
% \RequirePackage{fourier-orns}
% \def\themeGW@SecSubsecSeparator{\starredbullet}
% \def\themeGW@SecSubsecSeparator{\raisebox{-0.2em}{\Huge\starredbullet}}
% \def\themeGW@SecSubsecSeparator{\decoone}  % Too big


% -- Allowed input for optional argument (controls mode in which framesubtitle
% -- is displayed): default, newline, none.
\defbeamertemplate*{frametitle}{GW}[1][default]{%
    \vskip\themeGW@headerskip%
    \usebeamerfont{frametitle}\usebeamercolor[fg]{frametitle}%
    \strut\insertframetitle\strut%
    {%
        % -- Activating font is important because length of \par depends on it
        \usebeamerfont{framesubtitle}\usebeamercolor[fg]{framesubtitle}%
        \ifstrequal{#1}{none}{%
            \par%
        }{%
            \ifx\insertframesubtitle\@empty%
                \par%
            \else%
                \ifstrequal{#1}{default}{%
                    ~\ \themeGW@SecSubsecSeparator{} \ \insertframesubtitle\strut\par%
                }{}%
                \ifstrequal{#1}{newline}{%
                    \strut\par\insertframesubtitle\strut\par%
                }{}%
            \fi%
        }%
    }%
    % -- Comment following line to hide framenumber
    % \hfill{\scriptsize\insertframenumber/\inserttotalframenumber}%
}
% \setbeamertemplate{frametitle}[GW][default]
% -- No need to use \setbeamertemplate{frametitle}[GW], except you wish
% -- to change the submode: \setbeamertemplate{frametitle}[GW][submode]


% -- Following code is posted on several threads in Stackoverflow. I took it
% -- from https://tex.stackexchange.com/questions/109816/automatic-frame-titles-subtitles-with-condition
% -- and modified it for my needs (in particular, I addressed offset on plain pages)
\CheckCommand*\beamer@checkframetitle{%
    \@ifnextchar\bgroup\beamer@inlineframetitle{}}
\renewcommand*\beamer@checkframetitle{%
    \global\let\beamer@frametitle\relax\@ifnextchar%
    \bgroup\beamer@inlineframetitle{}}

\newlength{\themeGW@frametitleheight}
\newlength{\themeGW@framesubtitleheight}


\newcommand{\FrametitleAutoinsertSection}{%
    \addtobeamertemplate{frametitle}{%
    \ifbeamer@plainframe%
        % -- Correct for offset that empty title introduces
        \settoheight{\themeGW@frametitleheight}{\usebeamerfont{frametitle}Titlename}%
        \settoheight{\themeGW@framesubtitleheight}{\usebeamerfont{framesubtitle}Subtitlename}%
        % 
        % \vspace*{-2\themeGW@frametitleheight}\par% 2 accounts for parskip that is happening there
        \vspace*{-2\themeGW@frametitleheight-\themeGW@framesubtitleheight}% 2 accounts for parskip that is happening there
    \else%
        \ifx\insertframetitle\@empty%
            \frametitle{\secname}%
        \fi%
        \ifx\insertframesubtitle\@empty%
            \ifx\insertsubsection\@empty%
            \else%
                \framesubtitle{\subsecname}%
            \fi%
        \fi%
    \fi%
    }{}%
}
% -- To activate, simply use the command \FrametitleAutoinsertSection


\RequirePackage{calc}  % For length calculations to work

\newlength{\themeGW@gwbarshift}
\setlength{\themeGW@gwbarshift}{-\themeGW@headerskip-24pt}  % Padding from top of frame and estimate of font height


% -- Note: for this particular package, paths are strange because we compile from main.tex
\RequirePackage[
    % -- Adjust the paths for templatefile and backgroundsignal here to
    % -- the location where you store the templates.
    templatefile="GWtheme/generic_template_no_noise_whitened.txt",
    backgroundsignal="GWtheme/generic_template_w_noise.txt",
    % -- General stuff
    leftpadding=0.6\paperwidth,
    rightpadding=0.006\paperwidth,
    signalheight=20pt,  % Using em here is bad, has different values depending on fontsize, i.e. in particular different when using in frametitle or headline
    % -- Activate following two for above template to be used
    declaretitlebox=false,
    signalupshift=\themeGW@gwbarshift,  % Only use if gwbar is added to beamertheme
]{gwbar}
% -- Change default arguments in this file or just use \UpdateGWBarOptions in
% -- the file where you use this theme.


\RequirePackage{tikz}

% -- Optional: set TikZ styles
\tikzset{
    gwbar@linestyle/.style={
        fg,
        smooth,
        thick,
	},
    gwbar@bglinestyle/.style={
        bg!50,  % Nicer for transparent titlebox
        % gray!50!bg,  % Nicer for gwbar titlebox (default)
		smooth,
        thick,
	},
}


\setbeamertemplate{headline}[gwbar]  % -- Requires frametitle that is transparent, otherwise invisible
% \addtobeamertemplate{frametitle}{}{\drawgwbar}  % For use with gwbar, in case you do not want to use above frametitle template and headline is hidden behind frametitle

% -- For use of default frametitle with GW, activate following template
% \setbeamertemplate{frametitle}[gwbar]


% -- In order to avoid division by zero in appendix (where totalframenumber
% -- is set to zero), we deactivate the progressbar effect as appendix starts.
\pretocmd{\appendix}{\global\togglefalse{gwbar@progressbar}}{}{}


% -- Background ---------------------------------------------------------------
\RequirePackage{etoolbox}
\newtoggle{themeGW@logoinfoot}  % Determines if logo in background or footline
\toggletrue{themeGW@logoinfoot}

\newlength{\themeGW@footupshift}
\newlength{\themeGW@footrightshift}

\newlength{\themeGW@upperleftbg}
\newlength{\themeGW@upperrightbg}


\setlength{\themeGW@footupshift}{0.02\paperheight}
\setlength{\themeGW@footrightshift}{0.02\paperheight}

\setlength{\themeGW@upperleftbg}{0.08\paperheight}
\setlength{\themeGW@upperrightbg}{0.12\paperheight}


\defbeamertemplate*{background}{GW}{%
    \begin{tikzpicture}[overlay,remember picture]%
        \fill[fg] (current page.south west) -- ++(0, \themeGW@upperleftbg) -- ++(\paperwidth, \themeGW@upperrightbg-\themeGW@upperleftbg) -- (current page.south east) -- cycle;

        % \node[anchor=south east,inner sep=0pt,draw=none,xshift=-\themeGW@footrightshift,yshift=\themeGW@footupshift] at (current page.south east) {\insertlogo};
        % TODO: figure out why this inserts two pictures on normal frame
        % \node[anchor=south east,inner sep=0pt,draw=none,xshift=-\themeGW@titlegraphicvertshift,yshift=\themeGW@titlegraphicupshift] at (current page.south east) {\pgfuseimage{logo}};
        \iftoggle{themeGW@logoinfoot}{}{
            \node[anchor=east,inner sep=0pt,draw=none,xshift=-\themeGW@footrightshift,yshift=\themeGW@upperrightbg/2] at (current page.south east) {\pgfuseimage{logo}};
        }

    % \node[anchor=south west,inner sep=0pt,draw=none,xshift=0.025\paperheight,yshift=0.025\paperheight] at (current page.south west) {\textcolor{bg}{\sffamily\bfseries\small\MakeUppercase\insertauthor}};
    % % \node[anchor=south west,inner sep=0pt,draw=none,xshift=0.025\paperheight,yshift=0.025\paperheight] at (current page.south west) {\textcolor{bg}{\sffamily\bfseries\insertframenumber/\inserttotalframenumber \ \normalsize\MakeUppercase\insertauthor}};
    
    % \node[anchor=south,inner sep=0pt,draw=none,xshift=-0.025\paperheight,yshift=0.025\paperheight] at (current page.south) {\textcolor{bg}{\sffamily\bfseries\small\insertframenumber/\inserttotalframenumber}};
    \end{tikzpicture}%
}
% -- No need to use \setbeamertemplate{background}[GW]


% -- Second template, with fancy pattern
\usetikzlibrary{decorations.markings}
\usetikzlibrary{calc}

\newlength{\themeGW@Pattern@SquareSize}
\setlength{\themeGW@Pattern@SquareSize}{5pt}


\def\themeGW@Pattern@NSquarePerTriangle{9}  % Should be odd number, otherwise things will probably look strange
\def\themeGW@Pattern@StepSize{1/8}

\newcommand{\themeGW@Pattern@SetNSquarePerTriangle}[1]{%
    \renewcommand{\themeGW@Pattern@NSquarePerTriangle}{#1}%
    \renewcommand{\themeGW@Pattern@StepSize}{1/(#1 - 1)}%
}
% -- This allows easier access of step size



\tikzset{
    fillsquare1/.style={
        black!12!fg,
        line width=0.6pt,
    },
    fillsquarepath1/.style={
        fg,
        postaction=decorate,
        decoration={
            markings,
            mark = between positions 0 and 1 step \themeGW@Pattern@StepSize with {
                \draw[fillsquare1] (-\themeGW@Pattern@SquareSize/2, -\themeGW@Pattern@SquareSize/2) rectangle (\themeGW@Pattern@SquareSize/2, \themeGW@Pattern@SquareSize/2);
            },
        },
    },
    fillsquare2/.style={
        % fg!90!gray,
        white!5!fg,
        line width=0.6pt,
        },
    fillsquarepath2/.style={
        fg,
        postaction=decorate,
        decoration={
            markings,
            mark = between positions 0 and 1 step \themeGW@Pattern@StepSize with {
                \draw[fillsquare2] (-\themeGW@Pattern@SquareSize/2, -\themeGW@Pattern@SquareSize/2) rectangle (\themeGW@Pattern@SquareSize/2, \themeGW@Pattern@SquareSize/2);
            },
        },
    },
}


\newlength{\themeGW@Pattern@MaxHeight}  % Basically the pattern height
\newlength{\themeGW@Pattern@SquarePathHeight}  % Height used to draw pattern, accounting for square height

\newlength{\themeGW@Pattern@CommonShift}  % Shift of the whole pattern
\def\themeGW@Pattern@NSquareCommonShift{-1}  % Default shift in multiples of squares

\newlength{\themeGW@Pattern@RelativeShift}  % Shift of different pattern elements against each other
\def\themeGW@Pattern@NSquareRelativeShift{2}  % Default shift in multiples of squares

\def\themeGW@Pattern@NSquareDownShift{1}  % Determines if pattern starts on bottom of frame of slightly below/above (may look nicer)
\newlength{\themeGW@Pattern@DownShift}  % Default shift in multiples of squares


\setlength{\themeGW@Pattern@MaxHeight}{\themeGW@upperrightbg}  % In current mode, where we have rising slope from left to right. But also good for levelled bg line
\setlength{\themeGW@Pattern@SquarePathHeight}{\themeGW@Pattern@MaxHeight - \themeGW@Pattern@SquareSize * 707 / 1000}  % Very rough approximation of 1/sqrt(2), avoiding overflow. We do not account for linewidth (like Caltech website).

\newcommand{\themeGW@Pattern@CalcLengths}{%
    % -- Idea: re-calculate all default values that are related to SquarePathHeight
    \setlength{\themeGW@Pattern@DownShift}{\themeGW@Pattern@SquarePathHeight*\themeGW@Pattern@NSquareDownShift*2*\themeGW@Pattern@StepSize}% Step size is relative to triangle width, which is 2*SquarePathHeight
    \addtolength{\themeGW@Pattern@SquarePathHeight}{\themeGW@Pattern@DownShift}%
    % 
    \setlength{\themeGW@Pattern@CommonShift}{-\themeGW@Pattern@SquarePathHeight*\themeGW@Pattern@NSquareCommonShift*2*\themeGW@Pattern@StepSize}% Shift by NSquareCommonShift
    \setlength{\themeGW@Pattern@RelativeShift}{-\themeGW@Pattern@SquarePathHeight*\themeGW@Pattern@NSquareRelativeShift*2*\themeGW@Pattern@StepSize}% Shift by NSquareRelativeShift
}


\newlength{\themeGW@Pattern@InsetSize}  % How large inset in middle of background is
\setlength{\themeGW@Pattern@InsetSize}{0pt}


\defbeamertemplate{background}{GWPattern}{%
    \begin{tikzpicture}[overlay,remember picture]%
        % -- We can just do clipping in other scope and immediately draw correct thing here
        \clip[smooth] (current page.south west) -- ++(0, \themeGW@upperleftbg) -- ++(\paperwidth, \themeGW@upperrightbg-\themeGW@upperleftbg) -- (current page.south east) -- cycle;
        \fill[fg] (current page.south west) -- ++(0, \themeGW@upperleftbg) -- ++(\paperwidth, \themeGW@upperrightbg-\themeGW@upperleftbg) -- (current page.south east) -- cycle;
        % -- Add-on: clipping twice + drawing within limits yields results with best rendering, by far


        \begin{scope}[
            shift=(current page.south),
        ]
            \clip[smooth] (current page.south west) -- ++(0, \themeGW@upperleftbg) -- ++(\paperwidth, \themeGW@upperrightbg-\themeGW@upperleftbg) -- (current page.south east) -- cycle;

            \pgfmathsetmacro{\LastIndex}{\paperwidth/(2*\themeGW@Pattern@SquarePathHeight)}
            \pgfmathsetmacro{\LastIndex}{2*\LastIndex+1}  % +1 to make sure we do not encounter rounding errors
            \pgfmathround{\LastIndex}
            \let\LastIndexInt\pgfmathresult
            
            \pgfmathsetmacro{\HalfShift}{\LastIndex/4}  
            \pgfmathround{\HalfShift}
            \let\HalfShift\pgfmathresult
            % -- We want to shift by integer multiple of whole pattern length, thus division by 4

            \foreach \i in {-2, 0, 2, 4, ..., \LastIndexInt} {  % -2 to safeguard against large commonshift
                \draw[
                    fillsquarepath1,
                    shift={(
                        \i*\themeGW@Pattern@SquarePathHeight
                        + \themeGW@Pattern@CommonShift
                        - \themeGW@Pattern@SquarePathHeight
                        - \HalfShift*2*\themeGW@Pattern@SquarePathHeight,
                        -\themeGW@Pattern@DownShift
                    )},
                ] (0, 0)
                    -- ++(\themeGW@Pattern@SquarePathHeight, \themeGW@Pattern@SquarePathHeight)
                    -- ++(\themeGW@Pattern@SquarePathHeight, -\themeGW@Pattern@SquarePathHeight);
                
                
                \draw[
                    fillsquarepath2,
                    shift={(
                        \i*\themeGW@Pattern@SquarePathHeight
                        + \themeGW@Pattern@CommonShift
                        + \themeGW@Pattern@RelativeShift
                        - \themeGW@Pattern@SquarePathHeight
                        - \HalfShift*2*\themeGW@Pattern@SquarePathHeight,
                        -\themeGW@Pattern@DownShift
                    )},
                ] (0, 0)
                    -- ++(\themeGW@Pattern@SquarePathHeight, \themeGW@Pattern@SquarePathHeight)
                    -- ++(\themeGW@Pattern@SquarePathHeight, -\themeGW@Pattern@SquarePathHeight);
            }
        \end{scope}

        % -- Order matters, we want this in foreground
        % \node[anchor=south east,inner sep=0pt,draw=none,xshift=-\themeGW@footrightshift,yshift=\themeGW@footupshift] at (current page.south east) {\insertlogo};
        \iftoggle{themeGW@logoinfoot}{}{
            \node[anchor=east,inner sep=0pt,draw=none,xshift=-\themeGW@footrightshift,yshift=\themeGW@upperrightbg/2] at (current page.south east) {\pgfuseimage{logo}};
        }
    \end{tikzpicture}%
    \begin{tikzpicture}[overlay,remember picture]%
        \begin{scope}[
            shift={(current page.south)},
        ]
            \draw[
                bg,
                fill,
                shift={(0, \themeGW@upperleftbg/2 + \themeGW@upperrightbg/2)},
                rotate=45,
            ] (-\themeGW@Pattern@InsetSize/2, -\themeGW@Pattern@InsetSize/2) rectangle (\themeGW@Pattern@InsetSize/2, \themeGW@Pattern@InsetSize/2);
        \end{scope}
    \end{tikzpicture}%
}

% -- Not the default. To activate, uncomment next line
% \setbeamertemplate{background}[GWPattern]


\newcommand{\LevelledBGLine}[1]{%
    \def\@tmp{#1}%
    \setlength{\themeGW@upperleftbg}{\@tmp}%
    \setlength{\themeGW@upperrightbg}{\@tmp}%
    \setlength{\themeGW@Pattern@SquarePathHeight}{\@tmp - \themeGW@Pattern@SquareSize * 707 / 1000}% Very rough approximation of 1/sqrt(2), avoiding overflow. We do not account for linewidth (like Caltech website).
    \themeGW@Pattern@CalcLengths%
}



% -- Footline and navigation symbols ------------------------------------------
\setbeamertemplate{navigation symbols}{}

% \defbeamertemplate*{footline}{%
%     \vskip0.15\paperheight%
% }
% -- Default template of Berkeley, but I want something in footline

% \defbeamertemplate*{footline}{}  % Don't see how previous one makes a difference


\RequirePackage{appendixnumberbeamer}
\RequirePackage{etoolbox}

% -- Initialize a toggle for appendix
\newtoggle{inappendix}
\settoggle{inappendix}{false}

% -- Patch the \appendix command to set the toggle to true
\pretocmd{\appendix}{\global\toggletrue{inappendix}}{}{}
% -> luckily, is still added when appendixnumberbeamer is loaded again e.g. in main document
% \pretocmd{\appendix}{\global\togglefalse{gwbar@progressbar}}{}{}  % Avoid division by zero


\defbeamertemplate*{footline}{GW}[1][true]{%
  \leavevmode%
  \hbox{%
  \begin{beamercolorbox}[wd=.333\paperwidth]{footline}%
    \hspace\themeGW@footrightshift%
    {%
        \usebeamerfont{author in head/foot}%
        % \MakeUppercase\insertauthor%
        \MakeUppercase\insertshortauthor% Does not actually make stuff uppercase, for some reason -> thus, if you intend to use this, define the short author with MakeUppercase already
    }%
    \hfill%
  \end{beamercolorbox}
  \begin{beamercolorbox}[wd=.333\paperwidth]{footline}%
    \centering%
    \usebeamerfont{framenumber in head/foot}%
        \iftoggle{inappendix}{%
            \phantom{42/96}%
        % -- Do not show framenumber in appendix (where progressbar also stops)
        }{%
        % \ifstrequal{#1}{true}{%
        \ifbool{#1}{%
            \insertframenumber/\inserttotalframenumber%
        }{%
            \phantom{42/96}%
        }%
        }%
  \end{beamercolorbox}%
  \begin{beamercolorbox}[wd=.333\paperwidth]{footline}%
    \iftoggle{themeGW@logoinfoot}{%
        \tikz[overlay,remember picture]{\node[anchor=east,inner sep=0pt,draw=none,xshift=-\themeGW@footrightshift,yshift=\themeGW@upperrightbg/2] at (current page.south east) {\pgfuseimage{logo}};}%
    }{}%
  \end{beamercolorbox}%
  }%
  \vspace{\themeGW@footupshift}%
}
% -- No need to use \setbeamertemplate{footline}[GW]


% -- Define default logo, to prevent errors
\pgfdeclareimage[height=0.1\paperheight]{logo}{example-image}


\mode
<all>