%% start of file `gwbar.sty'.
%% Copyright 2025 Max Melching (m-melching@web.de).
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License version 1.3c,
% available at http://www.latex-project.org/lppl/.


\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{gwbar}

% -- Option definitions
\newcommand{\gwbar@templatefilename}{"generic_template.txt"}

\newlength{\gwbar@leftpadding}  % Where signal starts, measured from left end of frame
\newlength{\gwbar@rightpadding}  % Where signal ends, measured from right end of frame

\newlength{\gwbar@signalheight}  % Set automatically in template (at the moment)
\newlength{\gwbar@signalwidth}  % Calculated based on leftpadding, rightpadding
\newlength{\gwbar@signalupshift}  % Amount by which signal is shifted up from where frametitle ends and subtitle begins

\newlength{\gwbar@yshiftpicture}  % Calculated automatically in template

\newlength{\gwbar@bottompadding}
\newlength{\gwbar@bottompadding@nosubtitle}
\newlength{\gwbar@bottompadding@withsubtitle}

\RequirePackage{etoolbox}
\newtoggle{gwbar@declaretitlebox}

\def\gwbar@backgroundtemplatefilename{"none"}

\newtoggle{gwbar@progressbar}

\newlength{\gwbar@headlinewidth@given}
\newlength{\gwbar@headlinewidth}

\newlength{\gwbar@linestyle@linewidth}
\newlength{\gwbar@bglinestyle@linewidth}
\newlength{\gwbar@linewidthshift}


% -- Set sensible defaults
\setlength{\gwbar@bottompadding}{0pt}
\setlength{\gwbar@bottompadding@nosubtitle}{0pt}
\setlength{\gwbar@bottompadding@withsubtitle}{0pt}


\@ifclassloaded{beamer}{
    \setlength{\gwbar@leftpadding}{0.6\textwidth}
    \setlength{\gwbar@rightpadding}{0.1\paperwidth}
    
    \setlength{\gwbar@signalupshift}{3pt}
    % -- Fiducial default value, is nice for some separation between
    % -- line and framesubtitle

    \def\gwbar@signalheight@given{"frametitleheight"}
    % -- Not a length for convenient comparisons, despite being slightly
    % -- less robust because it can now be any value. We choose some default
    % -- that does not make sense here for comparisons later in code.
    \setlength{\gwbar@signalheight}{2em}  % Set some default
    
    \setlength{\gwbar@headlinewidth@given}{\paperwidth}
    \setlength{\gwbar@headlinewidth}{\paperwidth}

    \toggletrue{gwbar@declaretitlebox}
    \toggletrue{gwbar@progressbar}
}{
    \setlength{\gwbar@leftpadding}{0.45\textwidth}
    \setlength{\gwbar@rightpadding}{0.05\textwidth}
    
    \setlength{\gwbar@signalupshift}{-0.5em}

    \def\gwbar@signalheight@given{\headheight}
    \setlength{\gwbar@signalheight}{2em}  % Set some default

    \setlength{\gwbar@headlinewidth@given}{\textwidth}
    \setlength{\gwbar@headlinewidth}{\textwidth}

    \togglefalse{gwbar@declaretitlebox}
    \togglefalse{gwbar@progressbar}
}


% -- Define package options
\RequirePackage{xkeyval}
\DeclareOptionX{templatefile}{\renewcommand{\gwbar@templatefilename}{#1}}
\DeclareOptionX{leftpadding}{\setlength{\gwbar@leftpadding}{#1}}
\DeclareOptionX{rightpadding}{\setlength{\gwbar@rightpadding}{#1}}
\DeclareOptionX{signalheight}{\renewcommand{\gwbar@signalheight@given}{#1}}
\DeclareOptionX{signalupshift}{\setlength{\gwbar@signalupshift}{#1}}
\DeclareOptionX{bottompadding}{\setlength{\gwbar@bottompadding}{#1}}
\DeclareOptionX{bottompaddingnosubtitle}{\setlength{\gwbar@bottompadding@nosubtitle}{#1}}
\DeclareOptionX{bottompaddingwithsubtitle}{\setlength{\gwbar@bottompadding@withsubtitle}{#1}}
\DeclareOptionX{declaretitlebox}{\settoggle{gwbar@declaretitlebox}{#1}}
\DeclareOptionX{backgroundsignal}{\renewcommand{\gwbar@backgroundtemplatefilename}{#1}}
\DeclareOptionX{progressbar}{\settoggle{gwbar@progressbar}{#1}}
\DeclareOptionX{headwidth}{\setlength{\gwbar@headlinewidth@given}{#1}}
\ProcessOptionsX


\@ifclassloaded{beamer}{
}{
    % -- Ensure compatibility, this would set beamer boxes
    \togglefalse{gwbar@declaretitlebox}
    \togglefalse{gwbar@progressbar}
}


\RequirePackage{pgf}
\pgfkeys{
	/gwbar/.is family, /gwbar,
    % -- No need to define default style, every variable has one already
    templatefile/.estore in = \gwbar@templatefilename,
    leftpadding/.estore in = \gwbar@leftpadding,
    rightpadding/.estore in = \gwbar@rightpadding,
    signalheight/.estore in = \gwbar@signalheight@given,
    signalupshift/.estore in = \gwbar@signalupshift,
    bottompadding/.estore in = \gwbar@bottompadding,
    bottompaddingnosubtitle/.estore in = \gwbar@bottompadding@nosubtitle,
    bottompaddingwithsubtitle/.estore in = \gwbar@bottompadding@withsubtitle,
    % declaretitlebox/.code = {\settoggle{gwbar@declaretitlebox}{#1}},
    backgroundsignal/.estore in = \gwbar@backgroundtemplatefilename,
    % progressbar/.code = {\settoggle{gwbar@progressbar}{#1}},
}


% -- Manage remaining dependencies
\RequirePackage{calc}  % For length calculations
\RequirePackage{xifthen}

\RequirePackage{tikz}
\usetikzlibrary{calc}

\@ifclassloaded{beamer}{
    \RequirePackage{beamerbasecompatibility}  % Standard for beamer packages
}{}


% -- Note: credits for box measuring code to
% -- https://tex.stackexchange.com/questions/401377/adjust-logo-height-to-match-frametitle-box-height
% -- (this is where all the "<- NEW" markers come from). The rest is mine.


% -- Boxes and box lengths
\newsavebox{\beamer@titlebox}% <- NEW
\newlength{\gwbar@frametitleheight}% <- NEW
\newsavebox{\beamer@titleboxnosubtitle}% <- NEW
\newlength{\gwbar@frametitleheightnosubtitle}% <- NEW
\newsavebox{\gwbar@subtitlebox}
\newlength{\gwbar@subtitleboxheight}


% -- Define custom styles for all elements, so that they can be customized easily
\@ifclassloaded{beamer}{
    \tikzset{
        gwbar@linestyle/.style={
            fg,
            smooth,
            line width=0.7pt,
        },
        gwbar@bglinestyle/.style={
            gray!50!bg,
            opacity=0.42,
            smooth,
            line width=0.7pt,
        },
        gwbar@fillinglayer/.style={
            fill,
            white,  % Default color of frame background canvas
        },
    }
}{
    \tikzset{
        gwbar@linestyle/.style={
            smooth,
            line width=0.7pt,
        },
        gwbar@bglinestyle/.style={
            smooth,
            gray!42,
            line width=0.7pt,
        },
    }
}



\newcommand{\gwbar@gettikzpicture}{%
    \@ifclassloaded{beamer}{%
        \begin{tikzpicture}[
            remember picture,
            overlay,
            shift={($(current page.north west)+(0pt,\gwbar@yshiftpicture)$)},
        ]%
    }{%
        \begin{tikzpicture}[
            remember picture,
            overlay,
            % shift={($(current page.north west)+(0pt,\gwbar@yshiftpicture)$)},
        ]%
    }%
        % -- NOTE: order in this picture matters for color and overlay etc
        % -- (which is why we often have part one and two). Also, spaces don't
        % -- matter in tikzpictures, so at least no issues with that.


        % -- Get maximum linewidth of stuff, so that covering works properly.
        % -- NOTE: setlength alone does not work because scope is local. To set
        % -- globally, in a way compatible with the calc package, we need some extras.
        % -- Cf. https://tex.stackexchange.com/questions/119730/global-scope-or-permanent-length-or-savebox
        \begin{scope}[gwbar@linestyle]
            \setlength{\gwbar@linestyle@linewidth}{\pgflinewidth}
            \global\gwbar@linestyle@linewidth=\gwbar@linestyle@linewidth
        \end{scope}
        \begin{scope}[gwbar@bglinestyle]
            \setlength{\gwbar@bglinestyle@linewidth}{\pgflinewidth}
            \global\gwbar@bglinestyle@linewidth=\gwbar@bglinestyle@linewidth
        \end{scope}
        % NOTE: \pgfkeysifdefined would not work if value is thick, we need numerical value
        \pgfmathsetmacro{\gwbar@maxlinewidth}{max(\gwbar@linestyle@linewidth, \gwbar@bglinestyle@linewidth)}
        \setlength{\gwbar@linewidthshift}{\gwbar@maxlinewidth pt + \gwbar@maxlinewidth pt}  % Take double as safety bed


        % % -- Account for linewidth in fitting of heights
        % \ifthenelse{\equal{\gwbar@signalheight@given}{"frametitleheight"}}{
        %     \addtolength{\gwbar@signalheight}{-\gwbar@maxlinewidth pt}
        %     % \addtolength{\gwbar@signalheight}{-\gwbar@linewidthshift}
        % }{
        %     \ifthenelse{\equal{\gwbar@signalheight@given}{"framesubtitleheight"}}{
        %         \addtolength{\gwbar@signalheight}{-\gwbar@maxlinewidth pt}
        %         % \addtolength{\gwbar@signalheight}{-\gwbar@linewidthshift}
        %     }{
        %         % -- If custom signalheight is given, we don't mess with that
        %     }
        % }
        % TODO: is this still required? I mean we clip, might look strange if we do not account for it...


        \iftoggle{gwbar@declaretitlebox}{
            \ifx\insertframesubtitle\@empty
                % -- Important in case where signalupshift is non-zero (and if no framesubtitle is set)
                \ifdim\gwbar@signalupshift=0pt
                \else
                    \draw[
                        gwbar@fillinglayer,
                        shift={(0, -\gwbar@frametitleheight + \gwbar@frametitleheightnosubtitle)},
                    ] (0, 0) rectangle (\paperwidth, \gwbar@signalupshift);
                \fi
            \fi
        }{}


        % -- Order matters, first one is supposed to serve as background
        % -- signal (if a background signal is given).
        \begin{scope}[
            gwbar@bglinestyle,
            x=\gwbar@signalwidth,
            y=\gwbar@signalheight,
            shift={(\gwbar@leftpadding, \gwbar@signalupshift)},  % Shifting here is important for clipping to work
        ]
            \ifthenelse{\equal{\gwbar@backgroundtemplatefilename}{"none"}}{
                \iftoggle{gwbar@progressbar}{
                    \clip ({(\gwbar@signalwidth + \gwbar@rightpadding) * \insertframenumber / \inserttotalframenumber}, -1) rectangle ({\gwbar@signalwidth + \gwbar@rightpadding}, 1);
                    
                    \ifthenelse{\equal{\gwbar@templatefilename}{"none"}}{
                        \draw[
                        ] (0, 0) -- (\gwbar@signalwidth, 0);
                    }{
                        \draw[
                        ] plot file {\gwbar@templatefilename};
                    }
                }{
                    \ifthenelse{\equal{\gwbar@templatefilename}{"none"}}{
                        \draw[
                        ] (0, 0) -- (\gwbar@signalwidth, 0);
                    }{
                        \draw[
                        ] plot file {\gwbar@templatefilename};
                    }
                }
            }{
                \draw[
                ] plot file {\gwbar@backgroundtemplatefilename};
            }
        
            \draw[
                shift={(-\gwbar@leftpadding, 0pt)},
            ] ({\gwbar@headlinewidth - \gwbar@rightpadding}, 0) -- (\gwbar@headlinewidth, 0);
        \end{scope}
        
        % -- Plot part of signal that is visible for current progress
        \begin{scope}[
            gwbar@linestyle,
            shift={(0pt, \gwbar@signalupshift)},
        ]
            \draw[
            ] (0, 0) -- (\gwbar@leftpadding, 0);
            
            \begin{scope}[
                x=\gwbar@signalwidth,%+\gwbar@rightpadding,
                y=\gwbar@signalheight,
                shift={(\gwbar@leftpadding, 0pt)},  % Shifting here is important for clipping to work
            ]
                \iftoggle{gwbar@progressbar}{
                    \clip (0, -1) rectangle ({(\gwbar@signalwidth + \gwbar@rightpadding) * \insertframenumber / \inserttotalframenumber}, 1);
                }{}

                \ifthenelse{\equal{\gwbar@templatefilename}{"none"}}{
                    \draw[
                    ] (0, 0) -- (\gwbar@signalwidth, 0);
                }{
                    \draw[
                    ] plot file {\gwbar@templatefilename};
                }
            
            \draw[
                shift={(-\gwbar@leftpadding, 0pt)},
            ] ({\gwbar@headlinewidth - \gwbar@rightpadding}, 0) -- (\gwbar@headlinewidth, 0);
            \end{scope}
        \end{scope}
    \end{tikzpicture}%
}



\newcommand{\gwbar}[1][]{%
    \pgfkeys{/gwbar, #1}%
    % 
    \iftoggle{gwbar@declaretitlebox}{%
        % -- Box measurements first
        % -- NOTE: not having blank lines is important for spacing reasons.
        % -- Always put a comment in.
        \ifbeamercolorempty[bg]{frametitle}{}{\nointerlineskip}%
        \@tempdima=\textwidth%
        \advance\@tempdima by\beamer@leftmargin%
        \advance\@tempdima by\beamer@rightmargin%
        % 
        % 
        \sbox{\beamer@titleboxnosubtitle}{% <- NEW
            \begin{beamercolorbox}[sep=0.3cm,left,wd=\the\@tempdima]{frametitle}%
                \usebeamerfont{frametitle}%
                \vbox{}\vskip-1ex%
                \if@tempswa\else\csname beamer@fteleft\endcsname\fi%
                \strut\insertframetitle\strut\par%
                \vskip-1ex%
                \if@tempswa\else\vskip-.3cm\fi% set inside beamercolorbox... evil here...
            \end{beamercolorbox}%
        }% <- NEW
        % 
        % 
        \sbox{\beamer@titlebox}{% <- NEW
            \begin{beamercolorbox}[sep=0.3cm,left,wd=\the\@tempdima]{frametitle}%
                \usebeamerfont{frametitle}%
                \vbox{}\vskip-1ex%
                \if@tempswa\else\csname beamer@fteleft\endcsname\fi%
                \strut\insertframetitle\strut\par%
                {%
                \ifx\insertframesubtitle\@empty%
                \else%
                {\usebeamerfont{framesubtitle}\usebeamercolor[fg]{framesubtitle}\insertframesubtitle\strut\par}%
                \fi%
                }%
                \vskip-1ex%
                \if@tempswa\else\vskip-.3cm\fi% set inside beamercolorbox... evil here...
            \end{beamercolorbox}%
        }% <- NEW
        \usebox{\beamer@titlebox}% <- NEW
        % 
        \settoheight{\gwbar@frametitleheight}{\usebox{\beamer@titlebox}}% <- NEW
        \addtolength{\gwbar@frametitleheight}{\headheight}%
        % 
        \settoheight{\gwbar@frametitleheightnosubtitle}{\usebox{\beamer@titleboxnosubtitle}}% <- NEW
        \addtolength{\gwbar@frametitleheightnosubtitle}{\headheight}%
        % 
        % 
        \setlength{\gwbar@yshiftpicture}{-\gwbar@frametitleheightnosubtitle}%
        % 
        \setlength{\gwbar@signalwidth}{\gwbar@headlinewidth - \gwbar@leftpadding - \gwbar@rightpadding}%
        \ifthenelse{\equal{\gwbar@signalheight@given}{"frametitleheight"}}{%
            \setlength{\gwbar@signalheight}{\gwbar@frametitleheightnosubtitle - \gwbar@signalupshift}%
            % -- -\gwbar@signalupshift to account for potential asymmetry.
        }{%
            \ifthenelse{\equal{\gwbar@signalheight@given}{"framesubtitleheight"}}{%
                \ifx\insertframesubtitle\@empty%
                    % -- Problem: setting and unsetting the framesubtitle and reading
                    % -- out the height of \beamer@titlebox in between does not work.
                    % -- Thus we have to redefine a new box with a placeholder at
                    % -- framesubtitle and this is what \gwbar@subtitlebox is for.
                    \sbox{\gwbar@subtitlebox}{%
                        \begin{beamercolorbox}[sep=0.3cm,left,wd=\the\@tempdima]{frametitle}%
                            \usebeamerfont{frametitle}%
                            \vbox{}\vskip-1ex%
                            \if@tempswa\else\csname beamer@fteleft\endcsname\fi%
                            \strut\insertframetitle\strut\par%
                            {%
                            {\usebeamerfont{framesubtitle}\usebeamercolor[fg]{framesubtitle}Frame Subtitle\strut\par}%
                            }%
                            \vskip-1ex%
                            \if@tempswa\else\vskip-.3cm\fi% set inside beamercolorbox... evil here...
                        \end{beamercolorbox}%
                    }%
                    % 
                    \settoheight{\gwbar@subtitleboxheight}{\usebox{\gwbar@subtitlebox}}%
                    \addtolength{\gwbar@subtitleboxheight}{\headheight}%
                \else%
                    \setlength{\gwbar@subtitleboxheight}{\gwbar@frametitleheight}%
                \fi%
                    % 
                    \setlength{\gwbar@signalheight}{\gwbar@subtitleboxheight - \gwbar@frametitleheightnosubtitle + \gwbar@signalupshift}%
            }{%
                % -- Numerical input has been given
                \setlength{\gwbar@signalheight}{\gwbar@signalheight@given}%
            }%
        }%
        % 
        \gwbar@gettikzpicture{}%
        % 
    }{% 
        % 
        \ifthenelse{\equal{\gwbar@signalheight@given}{"frametitleheight"} \or \equal{\gwbar@signalheight@given}{"framesubtitleheight"}}{%
            % -- Use default value of signalheight
        }{%
            \setlength{\gwbar@signalheight}{\gwbar@signalheight@given}%
        }%
        \setlength{\gwbar@headlinewidth}{\gwbar@headlinewidth@given}%
        \setlength{\gwbar@signalwidth}{\gwbar@headlinewidth - \gwbar@leftpadding - \gwbar@rightpadding}%
        % \setlength{\gwbar@yshiftpicture}{\gwbar@signalupshift}%
        \setlength{\gwbar@yshiftpicture}{0pt}%
        % -- Could just use signalupshift in options below, but I can see
        % -- already how this leads to issues when I do copy+paste.
        % 
        \gwbar@gettikzpicture{}%
        %
    }
    % 
    % -- Account for some of the offset, while not pushing into the signal
    % \vspace*{-\gwbar@signalupshift}% TODO: decide whether this helps
    \@ifclassloaded{beamer}{%
        \ifx\insertframesubtitle\@empty%
            % \vspace*{0.25\gwbar@signalheight}%
            \vspace*{\gwbar@bottompadding@nosubtitle}%
        \else%
            \vspace*{\gwbar@bottompadding@withsubtitle}%
        \fi%
    }{%
    }%
    % -- bottompadding is added on top of withsubtitle/nosubtitle
    \vspace*{\gwbar@bottompadding}%
}



% -- Still define beamertemplates for more straightforward use
\@ifclassloaded{beamer}{
    \iftoggle{gwbar@declaretitlebox}{
        \defbeamertemplate{frametitle}{gwbar}{\gwbar}
    }{
        \defbeamertemplate{headline}{gwbar}{\gwbar}
    }
    % -- We do NOT want to use * here because \addtobeamertemplate is a valid use
    % -- use now, so we do not want to force use via headilne template.
}{}
